import swap from "./swap";

export default function partition(arr: number[], left: number, right: number) {
  // создаем дубликаты левого и правого индекса

  // полчаем pivot элемент сумируя инекс ((слева и справа / 2) округив в меньшую сторону)

  // цикл: если: левый индекс меньше или равна идексу грани справа
  //      то: цикл: если: элемент в масиве с инлексом левой граници меньше Pivot
  //                      то: дикриментируем левую грань
  //          цикл: если: элемент в масиве с инлексом правой граници боьше Pivot
  //                      то: инкреминтируем праую границу

  //          (       сужаем поиск справа и слева к Pivot элементу       )
  // найдя элементы в массиве который нахдяться не с той стороны от Pivot эемента - внури верхнего цикла
  //
  //        если: левый индекс меньше или равна идексу грани справа
  //              то: swap-оем эементы, перемещяя элемент справа на место эемента слева и наоборот
  //                  деаем инкримент и дикримент правого и левого индекса

  // выйдя из цикла мы прошлись по всем эементам
  // левая граница указывает на pivot
  // выходя из функции возвращяем левую границу (индекс)

  let i = left;
  let j = right;

  const pivot = arr[Math.floor((i + j) / 2)];

  // for (; i <= j;) {
  //     for (; arr[i] < pivot;) {
  //         i++
  //     }
  //     for (; arr[j] > pivot;) {
  //         j--
  //     }

  while (i <= j) {
    while (arr[i] < pivot) {
      i++;
    }
    while (arr[j] > pivot) {
      j--;
    }

    if (i <= j) {
      swap(arr, i, j);
      i++;
      j--;
    }
  }

  return i;
}
